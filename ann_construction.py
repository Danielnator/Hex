# -*- coding: utf-8 -*-
"""
Created on Tue Feb 23 23:32:48 2021

@author: rumin

Building an Artificial Neural Network to play 9x9 Hex
The Ann gets trained by data generated form the Monte-Carlo-KI
"""

import tensorflow as tf
import pandas as pd
import numpy as np
print('***************')
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler



# Import data generated by Monte-Carlo-AI
# First 81 Columns represent the 9x9 fields, last column is the chosen move (1-81)
dataset = pd.read_csv("training_data/full_data.csv")

print(dataset.shape)

X = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values

print(X.shape)
print('**************X: ', X)

# Split training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 0)

y_train = y_train.reshape(-1, 1)
y_test = y_test.reshape(-1, 1)


print('---------------------- STEP 1: Data ---------------------------------')

# Apply feature scaling
sc = StandardScaler()
#X_train = sc.fit_transform(X_train)
#y_train = sc.fit_transform(y_train)         #y correctly transformed??
#X_test = sc.fit_transform(X_test)
#y_test = sc.fit_transform(y_test)







print('---------------------- STEP 2: Build ---------------------------------')

# Build the ANN
ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=81, activation='relu'))
#ann.add(tf.keras.layers.Dense(units=81, activation='relu'))
# Output Layer
ann.add(tf.keras.layers.Dense(units=81, activation='sigmoid'))


print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
print(X_train[0])
print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')




print('---------------------- STEP 3: Compile ---------------------------------')

# Compile the ANN
ann.compile(optimizer = 'adam', loss = 'categorical_hinge', metrics = ['accuracy'])


ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

ann.save("ann_model")

reconstructed_model = tf.keras.models.load_model("ann_model")

print(reconstructed_model)


